<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SpringBoot</title>
      <link href="/2023/03/06/SpringBoot/"/>
      <url>/2023/03/06/SpringBoot/</url>
      
        <content type="html"><![CDATA[<h3 id="Intellij-IDEA-is-not-recognizing-java-files-as-runnable"><a href="#Intellij-IDEA-is-not-recognizing-java-files-as-runnable" class="headerlink" title="Intellij IDEA is not recognizing  java files as runnable"></a>Intellij IDEA is not recognizing  java files as runnable</h3><ul><li>right-mouse click on your src</li><li>navigate to ‚ÄúMark Directory As‚Äù</li><li>choose ‚ÄúSources Root‚Äù It will now recognize your files correctly and your main classes will be able to run again</li></ul><h3 id="Web-server-failed-to-start-Port-8080-was-already-in-use"><a href="#Web-server-failed-to-start-Port-8080-was-already-in-use" class="headerlink" title="Web server failed to start. Port 8080 was already in use."></a>Web server failed to start. Port 8080 was already in use.</h3><ul><li>First check what processes are using that specific port, then killing it using its process ID:</li></ul><ol><li><p>Run <code>netstat -ano | findstr &lt; Port Number &gt;</code> This will identify which process is listening on port 8080.</p></li><li><p>Take note of the process ID (PID) e.g. 63262</p></li><li><p>Run <code>taskkill /F /PID &lt; Process Id &gt;</code>  replace &lt; Process Id &gt; with PID</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Software Development </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Heap üå∫</title>
      <link href="/2023/03/01/Heap/"/>
      <url>/2023/03/01/Heap/</url>
      
        <content type="html"><![CDATA[<h2 id="Binary-Tree"><a href="#Binary-Tree" class="headerlink" title="Binary Tree"></a>Binary Tree</h2><h1 id="Types-of-binary-tree"><a href="#Types-of-binary-tree" class="headerlink" title="Types of binary tree"></a>Types of binary tree</h1><h3 id="1-Full-Binary-Tree"><a href="#1-Full-Binary-Tree" class="headerlink" title="1. Full Binary Tree"></a>1. Full Binary Tree</h3><p>A full Binary tree is a special type of binary tree in which <strong>every parent node&#x2F;internal node has either two or no children</strong>.</p><p><img src="https://cdn.programiz.com/sites/tutorial2program/files/full-binary-tree_0.png" alt="Full binary tree"></p><p>To learn more, please visit <a href="https://www.programiz.com/dsa/full-binary-tree">full binary tree</a>.</p><h3 id="2-Perfect-Binary-Tree"><a href="#2-Perfect-Binary-Tree" class="headerlink" title="2. Perfect Binary Tree"></a>2. Perfect Binary Tree</h3><p>A perfect binary tree is a type of binary tree in which** every internal node has exactly two child nodes and all the leaf nodes are at the same level.**</p><p><img src="https://cdn.programiz.com/sites/tutorial2program/files/perfect-binary-tree_0.png" alt="Perfect binary tree">Perfect Binary Tree</p><p>To learn more, please visit <a href="https://www.programiz.com/dsa/perfect-binary-tree">perfect binary tree</a>.</p><h3 id="3-Complete-Binary-Tree"><a href="#3-Complete-Binary-Tree" class="headerlink" title="3. Complete Binary Tree"></a>3. Complete Binary Tree</h3><p>A complete binary tree is just like a full binary tree, but with two major differences</p><ol><li><strong>Every</strong> level must be completely filled</li><li>All the leaf elements must lean towards the <strong>left</strong>.</li><li>The last leaf element might not have a right sibling i.e. <strong>a complete binary tree doesn‚Äôt have to be a full binary tree.</strong></li></ol><p><img src="https://cdn.programiz.com/sites/tutorial2program/files/complete-binary-tree_0.png" alt="Complete Binary Tree">Complete Binary Tree</p><p>To learn more, please visit <a href="https://www.programiz.com/dsa/complete-binary-tree">complete binary tree</a>.</p><h3 id="4-Degenerate-or-Pathological-Tree"><a href="#4-Degenerate-or-Pathological-Tree" class="headerlink" title="4. Degenerate or Pathological Tree"></a>4. Degenerate or Pathological Tree</h3><p>A degenerate or pathological tree is the tree having  <strong>a single child either left or right  .</strong></p><p><img src="https://cdn.programiz.com/sites/tutorial2program/files/degenerate-binary-tree_0.png" alt="Degenerate Binary Tree"></p><h3 id="5-Skewed-Binary-Tree"><a href="#5-Skewed-Binary-Tree" class="headerlink" title="5. Skewed Binary Tree"></a>5. Skewed Binary Tree</h3><p>A skewed binary tree is a pathological&#x2F;degenerate tree in which the tree is either dominated by the left nodes or the right nodes. Thus, there are two types of skewed binary tree: <strong>left-skewed binary tree</strong> and <strong>right-skewed binary tree</strong>.</p><p><img src="https://cdn.programiz.com/sites/tutorial2program/files/skewed-binary-tree_0.png" alt="Skewed Binary Tree">Skewed Binary Tree</p><h3 id="6-Balanced-Binary-Tree"><a href="#6-Balanced-Binary-Tree" class="headerlink" title="6. Balanced Binary Tree"></a>6. Balanced Binary Tree</h3><p>It is a type of binary tree in which the difference between the height of the left and the right subtree for each node is either 0 or 1.</p><p><img src="https://cdn.programiz.com/sites/tutorial2program/files/height-balanced_1.png" alt="Balanced Binary Tree">Balanced Binary Tree</p><p>To learn more, please visit <a href="https://www.programiz.com/dsa/balanced-binary-tree">balanced binary tree</a>.</p><h1 id="Complete-binary-tree"><a href="#Complete-binary-tree" class="headerlink" title="Complete binary tree"></a>Complete binary tree</h1><h2 id="Max-heap-x2F-Min-heap"><a href="#Max-heap-x2F-Min-heap" class="headerlink" title="Max heap &#x2F; Min heap"></a>Max heap &#x2F; Min heap</h2><p>Heap data structure is <a href="https://www.programiz.com/dsa/complete-binary-tree">a complete binary tree</a> that satisfies <strong>the heap property</strong>, where any given node is</p><ul><li>always greater than its child node&#x2F;s and the key of the root node is the largest among all other nodes. This property is also called <strong>max heap property</strong>.</li><li>always smaller than the child node&#x2F;s and the key of the root node is the smallest among all other nodes. This property is also called <strong>min heap property</strong>.</li></ul><p><img src="https://www.programiz.com/sites/tutorial2program/files/maxheap_1.png" alt="Max-heap">Max-heap‚Üì</p><p><img src="https://www.programiz.com/sites/tutorial2program/files/minheap_0.png" alt="Min-heap">Min-heap‚Üì</p><p>This type of data structure is also called a <strong>binary heap</strong>.</p><h2 id="Heap-operation"><a href="#Heap-operation" class="headerlink" title="Heap operation"></a>Heap operation</h2><h3 id="Heapify"><a href="#Heapify" class="headerlink" title="Heapify"></a>Heapify</h3><p>Heapify is the process of creating a heap data structure from a binary tree. It is used to create a Min-Heap or a Max-Heap.</p><ol><li><p>Let the input array be</p><p><img src="https://www.programiz.com/sites/tutorial2program/files/array_1.png" alt="heap initial array"></p></li><li><p>Create a complete binary tree from the array</p><p><img src="https://www.programiz.com/sites/tutorial2program/files/completebt-1_0.png" alt="Complete binary tree"></p></li><li><p>Start from the first index of non-leaf node whose index is given by n&#x2F;2 - 1.</p><p><img src="https://www.programiz.com/sites/tutorial2program/files/start_1.png" alt="heapify"> leaf node</p></li><li><p>Set current element <code>i</code> as <code>largest</code>.</p></li><li><p>The index of left child is given by <code>2i + 1</code> and the right child is given by <code>2i + 2</code>.<br>If <code>leftChild</code> is greater than <code>currentElement</code> (i.e. element at <code>ith</code> index), set <code>leftChildIndex</code> as largest.<br>If <code>rightChild</code> is greater than element in <code>largest</code>, set <code>rightChildIndex</code> as <code>largest</code>.</p></li><li><p>Swap largest with currentElement</p><p><img src="https://www.programiz.com/sites/tutorial2program/files/swap_1.png" alt="heapify"></p></li><li><p>Repeat steps 3-7 until the subtrees are also heapified.</p></li></ol><p><strong>Algorithm</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Heapify(array, size, i)</span><br><span class="line">  set i as largest</span><br><span class="line">  leftChild = 2i + 1</span><br><span class="line">  rightChild = 2i + 2</span><br><span class="line">  </span><br><span class="line">  if leftChild &gt; array[largest]</span><br><span class="line">    set leftChildIndex as largest</span><br><span class="line">  if rightChild &gt; array[largest]</span><br><span class="line">    set rightChildIndex as largest</span><br><span class="line"></span><br><span class="line">  swap array[i] and array[largest]</span><br></pre></td></tr></table></figure><p>To create a Max-Heap:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MaxHeap(array, size)</span><br><span class="line">  loop from the first index of non-leaf node down to zero</span><br><span class="line">    call heapify</span><br></pre></td></tr></table></figure><p>For Min-Heap, both <code>leftChild</code> and <code>rightChild</code> must be larger than the parent for all nodes.</p><h2 id="Insert-Element-into-Heap"><a href="#Insert-Element-into-Heap" class="headerlink" title="Insert Element into Heap"></a>Insert Element into Heap</h2><p>Algorithm for insertion in Max Heap</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">If there is no node, </span><br><span class="line">  create a newNode.</span><br><span class="line">else (a node is already present)</span><br><span class="line">  insert the newNode at the end (last node from left to right.)</span><br><span class="line">  </span><br><span class="line">heapify the array</span><br></pre></td></tr></table></figure><ol><li><p>Insert the new element at the end of the tree.</p><p><img src="https://www.programiz.com/sites/tutorial2program/files/insert-heap-1.png" alt="insertion in heap"></p></li><li><p>Heapify the tree.</p></li></ol><p><img src="https://www.programiz.com/sites/tutorial2program/files/insert-heap-2.png" alt="insertion in heap"></p><p>For Min Heap, the above algorithm is modified so that <code>parentNode</code> is always smaller than <code>newNode</code>.</p><hr><h3 id="Delete-Element-from-Heap"><a href="#Delete-Element-from-Heap" class="headerlink" title="Delete Element from Heap"></a>Delete Element from Heap</h3><p>Algorithm for deletion in Max Heap</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">If nodeToBeDeleted is the leafNode</span><br><span class="line">  remove the node</span><br><span class="line">Else swap nodeToBeDeleted with the lastLeafNode</span><br><span class="line">  remove noteToBeDeleted</span><br><span class="line">   </span><br><span class="line">heapify the array</span><br></pre></td></tr></table></figure><ol><li><p>Select the element to be deleted.</p><p><img src="https://www.programiz.com/sites/tutorial2program/files/delete-1_1.png" alt="deletion in heap"></p></li><li><p>Swap it with the last element.</p><p><img src="https://www.programiz.com/sites/tutorial2program/files/delete-2_1.png" alt="deletion in heap"></p></li><li><p>Remove the last element.</p><p><img src="https://www.programiz.com/sites/tutorial2program/files/delete-3_0.png" alt="deletion in heap"></p></li><li><p>Heapify the tree.</p></li></ol><p><img src="https://www.programiz.com/sites/tutorial2program/files/delete-4_0.png" alt="deletion in heap"></p><p>For Min Heap, above algorithm is modified so that both <code>childNodes</code> are greater smaller than <code>currentNode</code>.</p><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">// Max-Heap data structure in Java</span><br><span class="line"></span><br><span class="line">import java.util.ArrayList;</span><br><span class="line"></span><br><span class="line">class Heap &#123;</span><br><span class="line">  void heapify(ArrayList&lt;Integer&gt; hT, int i) &#123;</span><br><span class="line">    int size = hT.size();</span><br><span class="line">    int largest = i;</span><br><span class="line">    int l = 2 * i + 1;</span><br><span class="line">    int r = 2 * i + 2;</span><br><span class="line">    if (l &lt; size &amp;&amp; hT.get(l) &gt; hT.get(largest))</span><br><span class="line">      largest = l;</span><br><span class="line">    if (r &lt; size &amp;&amp; hT.get(r) &gt; hT.get(largest))</span><br><span class="line">      largest = r;</span><br><span class="line"></span><br><span class="line">    if (largest != i) &#123;</span><br><span class="line">      int temp = hT.get(largest);</span><br><span class="line">      hT.set(largest, hT.get(i));</span><br><span class="line">      hT.set(i, temp);</span><br><span class="line"></span><br><span class="line">      heapify(hT, largest);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  void insert(ArrayList&lt;Integer&gt; hT, int newNum) &#123;</span><br><span class="line">    int size = hT.size();</span><br><span class="line">    if (size == 0) &#123;</span><br><span class="line">      hT.add(newNum);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      hT.add(newNum);</span><br><span class="line">      for (int i = size / 2 - 1; i &gt;= 0; i--) &#123;</span><br><span class="line">        heapify(hT, i);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  void deleteNode(ArrayList&lt;Integer&gt; hT, int num)</span><br><span class="line">  &#123;</span><br><span class="line">    int size = hT.size();</span><br><span class="line">    int i;</span><br><span class="line">    for (i = 0; i &lt; size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">      if (num == hT.get(i))</span><br><span class="line">        break;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    int temp = hT.get(i);</span><br><span class="line">    hT.set(i, hT.get(size-1));</span><br><span class="line">    hT.set(size-1, temp);</span><br><span class="line"></span><br><span class="line">    hT.remove(size-1);</span><br><span class="line">    for (int j = size / 2 - 1; j &gt;= 0; j--)</span><br><span class="line">    &#123;</span><br><span class="line">      heapify(hT, j);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  void printArray(ArrayList&lt;Integer&gt; array, int size) &#123;</span><br><span class="line">    for (Integer i : array) &#123;</span><br><span class="line">      System.out.print(i + &quot; &quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  public static void main(String args[]) &#123;</span><br><span class="line"></span><br><span class="line">    ArrayList&lt;Integer&gt; array = new ArrayList&lt;Integer&gt;();</span><br><span class="line">    int size = array.size();</span><br><span class="line"></span><br><span class="line">    Heap h = new Heap();</span><br><span class="line">    h.insert(array, 3);</span><br><span class="line">    h.insert(array, 4);</span><br><span class="line">    h.insert(array, 9);</span><br><span class="line">    h.insert(array, 5);</span><br><span class="line">    h.insert(array, 2);</span><br><span class="line"></span><br><span class="line">    System.out.println(&quot;Max-Heap array: &quot;);</span><br><span class="line">    h.printArray(array, size);</span><br><span class="line"></span><br><span class="line">    h.deleteNode(array, 4);</span><br><span class="line">    System.out.println(&quot;After deleting an element: &quot;);</span><br><span class="line">    h.printArray(array, size);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="MaxHeapify-VS-BuildMaxHeap"><a href="#MaxHeapify-VS-BuildMaxHeap" class="headerlink" title="MaxHeapify VS. BuildMaxHeap"></a>MaxHeapify VS. BuildMaxHeap</h2><p>Basically, <code>heapify</code> is an algorithm used to re-arrange the heap if the root node violates the heap property (<em>child subtrees must be heaps!</em>). It‚Äôs a vital part of building a heap, inserting or deleting a top node from the heap.</p><blockquote><p>Heapify is:</p><ul><li>after we popped the top node of the heap and we moved the last node to the top then we rearrange the tree from top-to-bottom so it is a heap again (we heapify)</li><li>heapify time complexity O(log n)</li></ul></blockquote><p>Heapify is not:</p><p>creating a heap from an array which is a bottom-up operation with a time complexity of O(n)</p><p>even though <code>heapify</code> is actively used for building a heap, we cannot say that building a heap is <code>heapify</code>. It‚Äôs just an essential part of the process.</p>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MongoDBü•≠</title>
      <link href="/2023/02/21/MongoDB/"/>
      <url>/2023/02/21/MongoDB/</url>
      
        <content type="html"><![CDATA[<h3 id="What-is-CRUD"><a href="#What-is-CRUD" class="headerlink" title="What is CRUD?"></a>What is CRUD?</h3><p>Create, Read, Update, and Delete (CRUD) are the four basic functions that models should be able to do, at most.</p><h3 id="Spring-Boot-React-and-MongoDB-Architecture"><a href="#Spring-Boot-React-and-MongoDB-Architecture" class="headerlink" title="Spring Boot, React and MongoDB Architecture"></a>Spring Boot, React and MongoDB Architecture</h3><p><img src="https://bezkoder.com/wp-content/uploads/2020/03/spring-boot-react-mongodb-crud-example-architecture.png" alt="spring-boot-react-mongodb-crud-example-architecture"></p><h3 id="Error-message-Process-finished-with-exit-code-1073741819-0xC0000005"><a href="#Error-message-Process-finished-with-exit-code-1073741819-0xC0000005" class="headerlink" title="Error message: Process finished with exit code -1073741819 (0xC0000005)"></a>Error message: Process finished with exit code -1073741819 (0xC0000005)</h3><p>ÈóÆÈ¢òÊèèËø∞Ôºö<br>    idea‰∏≠ÂêØÂä®È°πÁõÆÊä•  Process finished with exit code -1073741819 (0xC0000005) ÔºåÂ¶ÇÂõæÊâÄÁ§∫Ôºö</p><p>ÈóÆÈ¢òËß£ÂÜ≥Ôºö<br>   ÂéüÂõ†ÔºöÁªèËøáÂ§öÊñπÊü•ËØÅÔºåÈóÆÈ¢òÊúÄÁªàÂÆö‰ΩçÂú®ÈáëÂ±±ËØçÈú∏2016‰∏äÔºåÂ¶ÇÊûúÂºÄÂêØ‰∫ÜÈáëÂ±±ËØçÈú∏ÁöÑÂàíËØëÂäüËÉΩÔºåÂ∞±‰ºöÂá∫Áé∞Ê≠§ÈîôËØØÔºåÂÖ∑‰ΩìÂéüÁêÜÊúâÂæÖÁ†îÁ©∂„ÄÇÂú®ÂÖ≥Èó≠ÈáëÂ±±ËØçÈú∏Êó∂ÔºåÊúâÊó∂idea‰πü‰ºöËá™Âä®ÂÖ≥Èó≠„ÄÇ</p><p>‚Äã    Ëß£ÂÜ≥ÔºöÂÖ≥ÊéâÈáëÂ±±ËØçÈú∏ÔºåÊàñËÄÖÊääÈáëÂ±±ËØçÈú∏ÁöÑÂàíËØëÂäüËÉΩÂÖ≥ÊéâÔºåÁÑ∂ÂêéÈáçÂêØideaÔºåÂÜçËøêË°åÈ°πÁõÆÂ∞±Ê≤°ÈóÆÈ¢ò‰∫Ü„ÄÇÁªèËøáÂ∞ùËØïÔºåÂèëÁé∞Âè™Ë¶ÅÂú®IDEAÁ¨¨‰∏ÄÊ¨°ÊâìÂºÄÂπ∂ËøêË°åÁöÑÊó∂ÂÄôÔºåÊ≤°ÊúâÂºÄÂêØÈáëÂ±±ËØçÈú∏ÁöÑÂàíËØëÂäüËÉΩÔºåÈÇ£‰πà‰πãÂêéÂ∞±ÁÆóÂºÄÂêØ‰πü‰∏ç‰ºöÊúâÈóÆÈ¢ò„ÄÇÊâÄ‰ª•Â¶ÇÊûú‰∏ÄÂÆöÈúÄË¶ÅÁî®ÈáëÂ±±ÔºåÂ∞±ÂÖàÊâìÂºÄideaËøêË°åÈ°πÁõÆÔºåÂú®ÊâìÂºÄÈáëÂ±±ÔºåÊàñËÄÖÁõ¥Êé•ÊääÈáëÂ±±ÁöÑÂàíËØëÂäüËÉΩÂÖ≥ÊéâÂ∞±ÂèØ‰ª•‰∫Ü„ÄÇ</p><p>   ÔºÅÔºÅÔºÅÊ≥®ÊÑèÔºöÈáëÂ±±ËØçÈú∏ÂàíËØë‰∏éidea2018.3+ÁâàÊú¨‰∏çÂÖºÂÆπ</p>]]></content>
      
      
      <categories>
          
          <category> Software Development </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>gradient descent &amp; gradient ascent</title>
      <link href="/2023/02/21/gradient-descent-&amp;-gradient-ascent/"/>
      <url>/2023/02/21/gradient-descent-&amp;-gradient-ascent/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/weixin_39631030/article/details/81260960?spm=1001.2101.3001.6650.4&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-4-81260960-blog-121268161.pc_relevant_default&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-4-81260960-blog-121268161.pc_relevant_default&utm_relevant_index=8">https://blog.csdn.net/weixin_39631030/article/details/81260960?spm=1001.2101.3001.6650.4&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-4-81260960-blog-121268161.pc_relevant_default&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-4-81260960-blog-121268161.pc_relevant_default&amp;utm_relevant_index=8</a></p>]]></content>
      
      
      <categories>
          
          <category> Machine Learning </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>üå∏Basic Math</title>
      <link href="/2023/02/17/BasicMath/"/>
      <url>/2023/02/17/BasicMath/</url>
      
        <content type="html"><![CDATA[<h2 id="Math-terminology"><a href="#Math-terminology" class="headerlink" title="Math terminology"></a>Math terminology</h2><ul><li><p>numerator<em>n.</em>&#x2F;ÀànjuÀêm…ôre…™t…ô(r)&#x2F; </p><p>( <em>mathematics Êï∞</em>) the number above the line in a <strong>fraction</strong> , for example 3 in the <strong>fraction</strong> 3‚ÅÑ4 ÔºàÂàÜÊï∞‰∏≠ÁöÑÔºâÂàÜÂ≠ê </p></li><li><p>de¬∑nom¬∑in¬∑ator <em>n.</em> &#x2F;d…™Ààn…ím…™ne…™t…ô(r)&#x2F; </p><p>( <em>mathematics Êï∞</em>) the number below the line in a <strong>fraction</strong> showing how many parts the whole is divided into, for example 4 in 3‚ÅÑ4 ÂàÜÊØç</p></li><li><p>ex¬∑po¬∑nen¬∑tial    <em>adj.</em>   &#x2F;Àåeksp…ôÀànen Él&#x2F; </p><p>( <em>mathematics Êï∞</em>) of or shown by an <em><strong>exponent</strong></em> ÊåáÊï∞ÁöÑÔºõÂπÇÁöÑÔºõÁî±ÊåáÊï∞Ë°®Á§∫ÁöÑ</p><p>2 4 is an exponential expression. 24ÊòØ‰∏™ÊåáÊï∞Âºè„ÄÇ</p><p>an <strong>exponential curve&#x2F;function</strong> ÊåáÊï∞Êõ≤Á∫ø‚ï±ÂáΩÊï∞</p></li><li><p>geo¬∑met¬∑ric    <em>adj.</em>   &#x2F;Àåd íiÀê…ôÀàmetr…™k&#x2F; </p><p>( also <em>less frequent</em> <strong>geo¬∑met¬∑ric¬∑al</strong>  &#x2F;‚Äë…™kl&#x2F;  ) of <strong>geometry</strong> ; of or like the lines, shapes, etc. used in <strong>geometry</strong> , especially because of having regular shapes or lines Âá†‰ΩïÔºàÂ≠¶ÔºâÁöÑÔºõÔºà‰ººÔºâÂá†‰ΩïÂõæÂΩ¢ÁöÑ</p></li><li></li><li></li><li></li><li></li><li></li><li></li><li></li><li></li></ul><h2 id="Greek-Letters"><a href="#Greek-Letters" class="headerlink" title="Greek Letters"></a>Greek Letters</h2><table><thead><tr><th align="left">Symbol Name</th><th align="left">Capital Letter</th><th align="left">Small Letter</th></tr></thead><tbody><tr><td align="left"><a href="https://www.greeksymbols.net/alpha-symbol">Alpha</a></td><td align="left">Œë</td><td align="left">Œ±</td></tr><tr><td align="left"><a href="https://www.greeksymbols.net/beta-symbol">Beta</a></td><td align="left">Œí</td><td align="left">Œ≤</td></tr><tr><td align="left"><a href="https://www.greeksymbols.net/gamma-symbol">Gamma</a></td><td align="left">Œì</td><td align="left">Œ≥</td></tr><tr><td align="left"><a href="https://www.greeksymbols.net/delta-symbol">Delta</a></td><td align="left">Œî</td><td align="left">Œ¥</td></tr><tr><td align="left"><a href="https://www.greeksymbols.net/epsilon-symbol">Epsilon</a></td><td align="left">Œï</td><td align="left">Œµ</td></tr><tr><td align="left"><a href="https://www.greeksymbols.net/zeta-symbol">Zeta</a></td><td align="left">Œñ</td><td align="left">Œ∂</td></tr><tr><td align="left"><a href="https://www.greeksymbols.net/eta-symbol">Eta</a></td><td align="left">Œó</td><td align="left">Œ∑</td></tr><tr><td align="left"><a href="https://www.greeksymbols.net/theta-symbol">Theta</a></td><td align="left">Œò</td><td align="left">Œ∏</td></tr><tr><td align="left"><a href="https://www.greeksymbols.net/iota-symbol">Iota</a></td><td align="left">Œô</td><td align="left">Œπ</td></tr><tr><td align="left"><a href="https://www.greeksymbols.net/kappa-symbol">Kappa</a></td><td align="left">Œö</td><td align="left">Œ∫</td></tr><tr><td align="left"><a href="https://www.greeksymbols.net/lambda-symbol">Lambda</a></td><td align="left">Œõ</td><td align="left">Œª</td></tr><tr><td align="left"><a href="https://www.greeksymbols.net/mu-symbol">Mu</a></td><td align="left">Œú</td><td align="left">Œº</td></tr><tr><td align="left"><a href="https://www.greeksymbols.net/nu-symbol">Nu</a></td><td align="left">Œù</td><td align="left">ŒΩ</td></tr><tr><td align="left"><a href="https://www.greeksymbols.net/xi-symbol">Xi</a></td><td align="left">Œû</td><td align="left">Œæ</td></tr><tr><td align="left"><a href="https://www.greeksymbols.net/omicron-symbol">Omicron</a></td><td align="left">Œü</td><td align="left">Œø</td></tr><tr><td align="left"><a href="https://www.greeksymbols.net/pi-symbol">Pi</a></td><td align="left">Œ†</td><td align="left">œÄ</td></tr><tr><td align="left"><a href="https://www.greeksymbols.net/rho-symbol">Rho</a></td><td align="left">Œ°</td><td align="left">œÅ</td></tr><tr><td align="left"><a href="https://www.greeksymbols.net/sigma-symbol">Sigma</a></td><td align="left">Œ£</td><td align="left">œÉ</td></tr><tr><td align="left"><a href="https://www.greeksymbols.net/tau-symbol">Tau</a></td><td align="left">Œ§</td><td align="left">œÑ</td></tr><tr><td align="left"><a href="https://www.greeksymbols.net/upsilon-symbol">Upsilon</a></td><td align="left">Œ•</td><td align="left">œÖ</td></tr><tr><td align="left"><a href="https://www.greeksymbols.net/phi-symbol">Phi</a></td><td align="left">Œ¶</td><td align="left">œÜ</td></tr><tr><td align="left"><a href="https://www.greeksymbols.net/chi-symbol">Chi</a></td><td align="left">Œß</td><td align="left">œá</td></tr><tr><td align="left"><a href="https://www.greeksymbols.net/psi-symbol">Psi</a></td><td align="left">Œ®</td><td align="left">œà</td></tr><tr><td align="left"><a href="https://www.greeksymbols.net/omega-symbol">Omega</a></td><td align="left">Œ©</td><td align="left">œâ</td></tr></tbody></table><h2 id="Residules"><a href="#Residules" class="headerlink" title="Residules"></a>Residules</h2><p>A residual is a measure of how well a line fits an individual data point.</p><p><img src="https://mathbitsnotebook.com/Algebra1/StatisticsReg/residualgraph1aa.jpg" alt="residualgraph1aa"></p><h2 id="Likelihood"><a href="#Likelihood" class="headerlink" title="Likelihood"></a>Likelihood</h2><p>the likelihood is often written as <img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/e1f2f25132324db55a6a4e363d60e7859f407cef" alt="{\displaystyle {\mathcal {L}}(\theta \mid X)}"> instead of <img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/e83871172abd723dfbef5cf05077150aadff9f28" alt="{\displaystyle P(X\mid \theta )}"> to emphasize that it is to be understood as a function of the parameters Œ∏ instead of the random variable X.</p><h2 id="Log-Likelihood-Function"><a href="#Log-Likelihood-Function" class="headerlink" title="Log-Likelihood Function"></a>Log-Likelihood Function</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy</span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">likelihood</span>(<span class="params">theta,xs</span>):</span><br><span class="line">    p = <span class="number">1.0</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> xs:</span><br><span class="line">        p = p*theta**x * (<span class="number">1</span>-theta)**(<span class="number">1</span>-x)</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line">xs = [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>]</span><br><span class="line">theta1 = <span class="number">0.99</span></span><br><span class="line">theta2 = <span class="number">0.25</span></span><br><span class="line">loglik1 = numpy.log(likelihood(theta1,xs))</span><br><span class="line">loglik2 = numpy.log(likelihood(theta2,xs))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Log-Likelihood(&quot;</span>,theta1,<span class="string">&quot;|&quot;</span>,xs, <span class="string">&quot;)=&quot;</span>,loglik1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Log-Likelihood(&quot;</span>,theta2,<span class="string">&quot;|&quot;</span>,xs, <span class="string">&quot;)=&quot;</span>,loglik2)</span><br><span class="line"></span><br><span class="line"><span class="comment">#output:</span></span><br><span class="line"><span class="comment">#Log-Likelihood( 0.99 | [0, 0, 0, 1] )= -13.8255608938</span></span><br><span class="line"><span class="comment">#Log-Likelihood( 0.25 | [0, 0, 0, 1] )= -2.24934057848</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Bernoulli-model"><a href="#Bernoulli-model" class="headerlink" title="Bernoulli model"></a>Bernoulli model</h2><p> ÂØπÈöèÊú∫ËØïÈ™å‰∏≠Êüê‰∫ã‰ª∂ÊòØÂê¶ÂèëÁîüÔºåÂÆûÈ™åÁöÑÂèØËÉΩÁªìÊûúÂè™Êúâ‰∏§‰∏™„ÄÇÂèàÂêç<strong>‰∏§ÁÇπÂàÜÂ∏É</strong>ÊàñËÄÖ<strong>0-1ÂàÜÂ∏É</strong>ÔºåÊòØ‰∏Ä‰∏™Á¶ªÊï£ÂûãÊ¶ÇÁéáÂàÜÂ∏É„ÄÇ</p><h2 id="Gaussian-Distribution"><a href="#Gaussian-Distribution" class="headerlink" title="Gaussian Distribution"></a>Gaussian Distribution</h2><p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/8/8c/Standard_deviation_diagram.svg/2880px-Standard_deviation_diagram.svg.png" alt="img"></p><p><em>‚ÄúBell curve‚Äù redirects here.</em> </p><p>Ëã•<a href="http://zh.wikipedia.org/wiki/%E9%9A%A8%E6%A9%9F%E8%AE%8A%E9%87%8F">ÈöèÊú∫ÂèòÈáè</a><em>X</em>Êúç‰ªé‰∏Ä‰∏™<a href="http://zh.wikipedia.org/wiki/%E6%95%B0%E5%AD%A6%E6%9C%9F%E6%9C%9B">Êï∞Â≠¶ÊúüÊúõ</a>‰∏∫Œº„ÄÅ<a href="http://zh.wikipedia.org/wiki/%E6%A0%87%E5%87%86%E6%96%B9%E5%B7%AE">Ê†áÂáÜÊñπÂ∑Æ</a>‰∏∫œÉ2ÁöÑÈ´òÊñØÂàÜÂ∏ÉÔºåËÆ∞‰∏∫Ôºö</p><p>X‚àºN(Œº, œÉ^2),</p><p>The general form of its probability density function is</p><p><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/00cb9b2c9b866378626bcfa45c86a6de2f2b2e40" alt="{\displaystyle f(x)={\frac {1}{\sigma {\sqrt {2\pi }}}}e^{-{\frac {1}{2}}\left({\frac {x-\mu }{\sigma }}\right)^{2}}}"></p><p>The parameter Œº is the <a href="https://en.wikipedia.org/wiki/Mean">mean</a> or <a href="https://en.wikipedia.org/wiki/Expected_value">expectation</a> of the distribution (and also its <a href="https://en.wikipedia.org/wiki/Median">median</a> and <a href="https://en.wikipedia.org/wiki/Mode_(statistics)">mode</a>), while the parameter œÉ is its <a href="https://en.wikipedia.org/wiki/Standard_deviation">standard deviation</a>. The <a href="https://en.wikipedia.org/wiki/Variance">variance</a> of the distribution is œÉ^2. A random variable with a Gaussian distribution is said to be <strong>normally distributed</strong>, and is called a <strong>normal deviate</strong>. Ê≠£ÊÄÅÂàÜÂ∏É</p><h2 id="Maximum-Likelihood-Estimate-MLE"><a href="#Maximum-Likelihood-Estimate-MLE" class="headerlink" title="Maximum Likelihood Estimate (MLE)"></a>Maximum Likelihood Estimate (MLE)</h2><p>Maximum likelihood estimation is a method that determines values for the parameters of a model. The parameter values are found such that they maximize the likelihood that the process described by the model produced the data that were actually observed. <font color = "red">which can be interepreted as the parameter for which the data is most probable under the model.</font></p><h3 id="Finding-MLE-for-a-Bernoulli-Model"><a href="#Finding-MLE-for-a-Bernoulli-Model" class="headerlink" title="Finding MLE for a Bernoulli Model"></a>Finding MLE for a Bernoulli Model</h3><p><img src="https://www.linkpicture.com/q/b44baa669e565485220f2c57203e6f4.png" alt="image"></p><h3 id="Finding-ùúáùëÄùêøùê∏-of-Gaussian-distribution"><a href="#Finding-ùúáùëÄùêøùê∏-of-Gaussian-distribution" class="headerlink" title="Finding ùúáùëÄùêøùê∏ of Gaussian distribution"></a>Finding ùúáùëÄùêøùê∏ of Gaussian distribution</h3><p><img src="https://miro.medium.com/max/1400/1*akEbjkBGope8zRKvY00Gcg.png" alt="img"></p><p>üçÑ What can we do with maximum likelihood estimates? We can predict outcome of the next experiment:</p><p><img src="https://www.linkpicture.com/q/%EF%BC%81%EF%BC%81%EF%BC%81%EF%BC%811%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20230217174659.png" alt="img"></p><p>[TOC]</p>]]></content>
      
      
      <categories>
          
          <category> Machine Learning </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Sorting Algorithm üå∫</title>
      <link href="/2023/02/15/SortingAlgorithm/"/>
      <url>/2023/02/15/SortingAlgorithm/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Merge-Sort"><a href="#1-Merge-Sort" class="headerlink" title="1. Merge Sort"></a><font color = "pink">1. Merge Sort</font></h1><p><img src="https://www.programiz.com/sites/tutorial2program/files/merge-sort-example_0.png" alt="merge sort example"></p><p>The MergeSort function repeatedly divides the array into two halves until we reach a stage where we try to perform MergeSort on a subarray of size 1 i.e. p &#x3D;&#x3D; r.</p><p>After that, the merge function comes into play and combines the sorted arrays into larger arrays until the whole array is merged.</p><h2 id="Pseudocode"><a href="#Pseudocode" class="headerlink" title="Pseudocode:"></a>Pseudocode:</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">MergeSort(A, p, r):</span><br><span class="line">    if p &gt; r </span><br><span class="line">        return</span><br><span class="line">    q = (p+r)/2</span><br><span class="line">    mergeSort(A, p, q)</span><br><span class="line">    mergeSort(A, q+1, r)</span><br><span class="line">    merge(A, p, q, r)</span><br></pre></td></tr></table></figure><h2 id="JAVA"><a href="#JAVA" class="headerlink" title="JAVA:"></a>JAVA:</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">// Merge two subarrays L and M into arr</span><br><span class="line">void merge(int arr[], int p, int q, int r) &#123; // r is the size of the array</span><br><span class="line"></span><br><span class="line">    // Create L ‚Üê A[p..q] and M ‚Üê A[q+1..r]</span><br><span class="line">    int n1 = q - p + 1;</span><br><span class="line">    int n2 = r - q;</span><br><span class="line"></span><br><span class="line">    int L[n1], M[n2];</span><br><span class="line"></span><br><span class="line">    for (int i = 0; i &lt; n1; i++)</span><br><span class="line">        L[i] = arr[p + i];</span><br><span class="line">    for (int j = 0; j &lt; n2; j++)</span><br><span class="line">        M[j] = arr[q + 1 + j];</span><br><span class="line"></span><br><span class="line">    // Maintain current index of sub-arrays and main array</span><br><span class="line">    int i, j, k;</span><br><span class="line">    i = 0;</span><br><span class="line">    j = 0;</span><br><span class="line">    k = p;</span><br><span class="line"></span><br><span class="line">    // Until we reach either end of either L or M, pick larger among</span><br><span class="line">    // elements L and M and place them in the correct position at A[p..r]</span><br><span class="line">    while (i &lt; n1 &amp;&amp; j &lt; n2) &#123;</span><br><span class="line">        if (L[i] &lt;= M[j]) &#123;</span><br><span class="line">            arr[k] = L[i];</span><br><span class="line">            i++;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            arr[k] = M[j];</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        k++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // When we run out of elements in either L or M,</span><br><span class="line">    // pick up the remaining elements and put in A[p..r]</span><br><span class="line">    while (i &lt; n1) &#123;</span><br><span class="line">        arr[k] = L[i];</span><br><span class="line">        i++;</span><br><span class="line">        k++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    while (j &lt; n2) &#123;</span><br><span class="line">        arr[k] = M[j];</span><br><span class="line">        j++;</span><br><span class="line">        k++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Merge( ) Function Explained Step-By-Step</strong></p><p>Merging two consecutive subarrays of array</p><p><img src="https://www.programiz.com/sites/tutorial2program/files/merge-sort-demo-step-1.png" alt="Merging two consecutive subarrays of array"></p><p>The array A[0..5] contains <strong>two sorted</strong> subarrays A[0..3] and A[4..5]. Let us see how the merge function will merge the two arrays.</p><p><strong>Step 2:</strong> Maintain current index of sub-arrays and main array</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int i, j, k;</span><br><span class="line">i = 0; </span><br><span class="line">j = 0; </span><br><span class="line">k = p; </span><br></pre></td></tr></table></figure><p><img src="https://www.programiz.com/sites/tutorial2program/files/merge-sort-demo-step-3.png" alt="Maintain indices of copies of sub array and main array">Maintain indices of copies of sub array and main array</p><p><strong>Step 3:</strong> Until we reach the end of either L or M, pick larger among elements L and M and place them in the correct position at A[p..r]</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">while (i &lt; n1 &amp;&amp; j &lt; n2) &#123; </span><br><span class="line">    if (L[i] &lt;= M[j]) &#123; </span><br><span class="line">        arr[k] = L[i]; i++; </span><br><span class="line">    &#125; </span><br><span class="line">    else &#123; </span><br><span class="line">        arr[k] = M[j]; </span><br><span class="line">        j++; </span><br><span class="line">    &#125; </span><br><span class="line">    k++; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://www.programiz.com/sites/tutorial2program/files/merge-sort-demo-step-4.png" alt="Comparing individual elements of sorted subarrays until we reach end of one">Comparing individual elements of sorted subarrays until we reach end of one</p><p><strong>Step 4:</strong> When we run out of elements in either L or M, pick up the remaining elements and put in A[p..r]</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// We exited the earlier loop because j &lt; n2 doesn&#x27;t hold</span><br><span class="line">while (i &lt; n1)</span><br><span class="line">&#123;</span><br><span class="line">    arr[k] = L[i];</span><br><span class="line">    i++;</span><br><span class="line">    k++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://www.programiz.com/sites/tutorial2program/files/merge-sort-demo-step-5.png" alt="Copy the remaining elements from the first array to main subarray">Copy the remaining elements from the first array to main subarray</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">    // We exited the earlier loop because i &lt; n1 doesn&#x27;t hold  </span><br><span class="line">    while (j &lt; n2)</span><br><span class="line">    &#123;</span><br><span class="line">        arr[k] = M[j];</span><br><span class="line">        j++;</span><br><span class="line">        k++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="2-Quick-Sort"><a href="#2-Quick-Sort" class="headerlink" title="2. Quick Sort"></a><font color = "pink">2. Quick Sort</font></h1><p><strong>1. Select the Pivot Element</strong></p><p>There are different variations of quicksort where the pivot element is selected from different positions. Here, we will be selecting the <u>rightmost</u> element of the array as the pivot element.</p><p><img src="https://www.programiz.com/sites/tutorial2program/files/quick-sort-0.1_0.png" alt="Quick Sort Steps">Select a pivot element</p><p><strong>2. Rearrange the Array</strong></p><p>Now the elements of the array are rearranged so that elements that are smaller than the pivot are put on the left and the elements greater than the pivot are put on the right.</p><p><img src="https://www.programiz.com/sites/tutorial2program/files/quick-sort-0.2_0.png" alt="Quick Sort Steps"></p><p>Here‚Äôs how we rearrange the array:</p><ol><li><p>A pointer is fixed at the pivot element. The pivot element is compared with the elements beginning from the first index.</p><p><img src="https://www.programiz.com/sites/tutorial2program/files/quick-sort-partition-first-step.png" alt="Quick Sort Steps"></p></li><li><p>If the element is greater than the pivot element, a second pointer is set for that element.</p><p><img src="https://www.programiz.com/sites/tutorial2program/files/quick-sort-partition-second-step.png" alt="Quick Sort Steps"></p></li><li><p>Now, pivot is compared with other elements. If an element smaller than the pivot element is reached, <u>the smaller element is swapped with the greater element found earlier</u>.</p><p><img src="https://www.programiz.com/sites/tutorial2program/files/quick-sort-partition-third-step.png" alt="Quick Sort Steps"></p></li><li><p>Again, the process is repeated to set the next greater element as the second pointer. And, swap it with another smaller element.</p><p><img src="https://www.programiz.com/sites/tutorial2program/files/quick-sort-partition-fourth-step.png" alt="Quick Sort Steps"></p></li><li><p>The process goes on until the second last element is reached.</p><p><img src="https://www.programiz.com/sites/tutorial2program/files/quick-sort-partition-fifth-step.png" alt="Quick Sort Steps">The process goes on until the second last element is reached.</p></li><li><p>Finally, the pivot element is swapped with the second pointer.</p><p><img src="https://www.programiz.com/sites/tutorial2program/files/quick-sort-partition-sixth-step.png" alt="Quick Sort Steps">Finally, the pivot element is swapped with the second pointer.</p></li></ol><p><strong>3. Divide Subarrays</strong></p><p>Pivot elements are again chosen for the left and the right sub-parts separately. And, <strong>step 2</strong> is repeated.</p><p><img src="https://www.programiz.com/sites/tutorial2program/files/quick-sort_1.png" alt="Quick Sort Steps"></p><h2 id="pseudocode"><a href="#pseudocode" class="headerlink" title="pseudocode"></a>pseudocode</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">quickSort(array, p, r)</span><br><span class="line">  if (p &lt; r)</span><br><span class="line">    pivotIndex = partition(array,p, r)</span><br><span class="line">    quickSort(array, p, pivotIndex - 1)</span><br><span class="line">    quickSort(array, pivotIndex, r)</span><br><span class="line"></span><br><span class="line">partition(array, p, r)</span><br><span class="line">  set r as pivotIndex</span><br><span class="line">  storeIndex = p - 1</span><br><span class="line">  for i = p + 1 to r</span><br><span class="line">  if element[i] &lt; pivotElement</span><br><span class="line">    swap element[i] and element[storeIndex]</span><br><span class="line">    storeIndex++</span><br><span class="line">  swap pivotElement and element[storeIndex+1]</span><br><span class="line">return storeIndex + 1</span><br></pre></td></tr></table></figure><h2 id="JAVA-1"><a href="#JAVA-1" class="headerlink" title="JAVA"></a>JAVA</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">// Quick sort in Java</span><br><span class="line"></span><br><span class="line">import java.util.Arrays;</span><br><span class="line"></span><br><span class="line">class Quicksort &#123;</span><br><span class="line"></span><br><span class="line">  // method to find the partition position</span><br><span class="line">  static int partition(int array[], int low, int high) &#123;</span><br><span class="line">    </span><br><span class="line">    // choose the rightmost element as pivot</span><br><span class="line">    int pivot = array[high];</span><br><span class="line">    </span><br><span class="line">    // pointer for greater element</span><br><span class="line">    int i = (low - 1);</span><br><span class="line"></span><br><span class="line">    // traverse through all elements</span><br><span class="line">    // compare each element with pivot</span><br><span class="line">    for (int j = low; j &lt; high; j++) &#123;</span><br><span class="line">      if (array[j] &lt;= pivot) &#123;</span><br><span class="line"></span><br><span class="line">        // if element smaller than pivot is found</span><br><span class="line">        // swap it with the greatr element pointed by i</span><br><span class="line">        i++;</span><br><span class="line"></span><br><span class="line">        // swapping element at i with element at j</span><br><span class="line">        int temp = array[i];</span><br><span class="line">        array[i] = array[j];</span><br><span class="line">        array[j] = temp;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // swapt the pivot element with the greater element specified by i</span><br><span class="line">    int temp = array[i + 1];</span><br><span class="line">    array[i + 1] = array[high];</span><br><span class="line">    array[high] = temp;</span><br><span class="line"></span><br><span class="line">    // return the position from where partition is done</span><br><span class="line">    return (i + 1);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  static void quickSort(int array[], int low, int high) &#123;</span><br><span class="line">    if (low &lt; high) &#123;</span><br><span class="line"></span><br><span class="line">      // find pivot element such that</span><br><span class="line">      // elements smaller than pivot are on the left</span><br><span class="line">      // elements greater than pivot are on the right</span><br><span class="line">      int pi = partition(array, low, high);</span><br><span class="line">      </span><br><span class="line">      // recursive call on the left of pivot</span><br><span class="line">      quickSort(array, low, pi - 1);</span><br><span class="line"></span><br><span class="line">      // recursive call on the right of pivot</span><br><span class="line">      quickSort(array, pi + 1, high);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Main class</span><br><span class="line">class Main &#123;</span><br><span class="line">  public static void main(String args[]) &#123;</span><br><span class="line"></span><br><span class="line">    int[] data = &#123; 8, 7, 2, 1, 0, 9, 6 &#125;;</span><br><span class="line">    System.out.println(&quot;Unsorted Array&quot;);</span><br><span class="line">    System.out.println(Arrays.toString(data));</span><br><span class="line"></span><br><span class="line">    int size = data.length;</span><br><span class="line"></span><br><span class="line">    // call quicksort() on array data</span><br><span class="line">    Quicksort.quickSort(data, 0, size - 1);</span><br><span class="line"></span><br><span class="line">    System.out.println(&quot;Sorted Array in Ascending Order: &quot;);</span><br><span class="line">    System.out.println(Arrays.toString(data));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="3-Counting-Sort"><a href="#3-Counting-Sort" class="headerlink" title="¬†3.Counting Sort"></a><font color = "pink">¬†3.Counting Sort</font></h1><ol><li>Find out the maximum element (let it be <code>max</code>) from the given array.</li></ol><p><img src="https://www.programiz.com/sites/tutorial2program/files/Counting-sort-0_0.png" alt="Counting Sort steps"></p><ol start="2"><li>Initialize an array of length <code>max+1</code> with all elements 0. This array is used for storing the count of the elements in the array.</li></ol><p><img src="https://www.programiz.com/sites/tutorial2program/files/Counting-sort-1.png" alt="Counting Sort Step"></p><ol start="3"><li><u>Store the count of each element</u> at their respective index in <code>count</code> array</li></ol><p>For example: <u>if the count of element 3 is 2 then, 2 is stored in the 3rd position of count array</u>. If element ‚Äú5‚Äù is not present in the array, then 0 is stored in 5th position.</p><p><img src="https://www.programiz.com/sites/tutorial2program/files/Counting-sort-2.png" alt="Counting Sort Step"></p><p><font color = "red">4. Store cumulative sum of the elements of the count array. It helps in placing the elements into the correct index of the sorted array.</font> (0, 0+1, 0+1+2, 0+1+2+2‚Ä¶..)</p><p><img src="https://www.programiz.com/sites/tutorial2program/files/Counting-sort-3.png" alt="Counting Sort Step"></p><ol start="5"><li>Find the index of each element of the original array in the count array. This gives the cumulative count. Place the element at the index calculated as shown in figure below.</li></ol><p><img src="https://www.programiz.com/sites/tutorial2program/files/Counting-sort-4_1.png" alt="Counting Sort Steps">6.  After placing each element at its correct position, decrease its count by one.</p><h2 id="Pesudocode"><a href="#Pesudocode" class="headerlink" title="Pesudocode"></a>Pesudocode</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">countingSort(array, size)</span><br><span class="line">  max &lt;- find largest element in array</span><br><span class="line">  initialize count array with all zeros</span><br><span class="line">  for j &lt;- 0 to size</span><br><span class="line">    find the total count of each unique element and </span><br><span class="line">    store the count at jth index in count array</span><br><span class="line">  for i &lt;- 1 to max</span><br><span class="line">    find the cumulative sum and !!!!!!! store it in count array itself !!!!!!</span><br><span class="line">  for j &lt;- size down to 1</span><br><span class="line">    restore the elements to array</span><br><span class="line">    decrease count of each element restored by 1</span><br></pre></td></tr></table></figure><h2 id="JAVA-2"><a href="#JAVA-2" class="headerlink" title="JAVA"></a>JAVA</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Counting sort in Java programming</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CountingSort</span> &#123;</span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">countSort</span><span class="params">(<span class="type">int</span> array[], <span class="type">int</span> size)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] output = <span class="keyword">new</span> <span class="title class_">int</span>[size + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Find the largest element of the array</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> array[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; size; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (array[i] &gt; max)</span><br><span class="line">        max = array[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span>[] count = <span class="keyword">new</span> <span class="title class_">int</span>[max + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Initialize count array with all zeros.</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; max; ++i) &#123;</span><br><span class="line">      count[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Store the count of each element</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">      count[array[i]]++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Store the cummulative count of each array</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= max; i++) &#123;    <span class="comment">//notice, here i starts from 1</span></span><br><span class="line">      count[i] += count[i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Find the index of each element of the original array in count array, and</span></span><br><span class="line">    <span class="comment">// place the elements in output array</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> size - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">      output[count[array[i]] - <span class="number">1</span>] = array[i];</span><br><span class="line">      count[array[i]]--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Copy the sorted elements into original array</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">      array[i] = output[i];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Driver code</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] data = &#123; <span class="number">4</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">1</span> &#125;;</span><br><span class="line">    <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> data.length;</span><br><span class="line">    <span class="type">CountingSort</span> <span class="variable">cs</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountingSort</span>();</span><br><span class="line">    cs.countSort(data, size);</span><br><span class="line">    System.out.println(<span class="string">&quot;Sorted Array in Ascending Order: &quot;</span>);</span><br><span class="line">    System.out.println(Arrays.toString(data));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="4-Bucket-Sort"><a href="#4-Bucket-Sort" class="headerlink" title="¬†4. Bucket Sort"></a><font color = "pink">¬†4. Bucket Sort</font></h1><p>The process of bucket sort can be understood as a <strong>scatter-gather approach</strong>. Here, elements are first scattered into buckets then the elements in each bucket are sorted. Finally, the elements are gathered in order.</p><p><img src="https://www.programiz.com/sites/tutorial2program/files/Bucket_2.png" alt="Bucket Sort Working"></p><p>!!!!!!!</p><ol><li><p>Suppose, the input array is:</p><p><img src="https://www.programiz.com/sites/tutorial2program/files/Bucket-sort-0.1_0.png" alt="Bucket Sort Steps">Input array</p><p>Create an array of size 10. Each slot of this array is used as a bucket for storing elements.</p><p><img src="https://www.programiz.com/sites/tutorial2program/files/Bucket-sort-0_0.png" alt="Bucket Sort Steps">Array in which each position is a bucket</p></li><li><p>Insert elements into the buckets from the array. The elements are inserted according to the range of the bucket.</p><p>In our example code, we have buckets each of ranges from 0 to 1, 1 to 2, 2 to 3,‚Ä¶‚Ä¶ (n-1) to n.</p><p>Suppose, an input element is 0.23 is taken. It is multiplied by size &#x3D; 10 (ie. 0.23*10&#x3D;2.3 ). Then, it is converted into an integer (ie. 2.3‚âà2 ). Finally, .23 is inserted into bucket-2.</p><p><img src="https://www.programiz.com/sites/tutorial2program/files/Bucket-sort-0.2_0.png" alt="Bucket Sort Steps"></p><p>Similarly, 0.25 is also inserted into the same bucket. Everytime, the floor value of the floating point number is taken.</p><p>If we take integer numbers as input, we have to divide it by the interval (10 here) to get the floor value.</p><p>Similarly, other elements are inserted into their respective buckets.</p><p><img src="https://www.programiz.com/sites/tutorial2program/files/Bucket-sort-0.3_0.png" alt="Bucket Sort Steps"></p></li><li><p>The elements of each bucket are sorted using any of the stable sorting algorithms. Here, we have used quicksort (inbuilt function).</p><p><img src="https://www.programiz.com/sites/tutorial2program/files/Bucket-sort-0.4_0.png" alt="Bucket Sort Steps"></p></li><li><p>The elements from each bucket are gathered.</p><p>It is done by iterating through the bucket and inserting an individual element into the original array in each cycle. The element from the bucket is erased once it is copied into the original array.</p><p><img src="https://www.programiz.com/sites/tutorial2program/files/Bucket-sort-0.5_0.png" alt="Bucket Sort Steps"></p></li></ol><p>Bucket sort is used when:</p><ul><li>input is uniformly distributed over a range.</li><li>there are floating point values</li></ul><h2 id="Pseudocode-1"><a href="#Pseudocode-1" class="headerlink" title="Pseudocode"></a>Pseudocode</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">bucketSort()</span><br><span class="line">  create N buckets each of which can hold a range of values</span><br><span class="line">  for all the buckets</span><br><span class="line">    initialize each bucket with 0 values</span><br><span class="line">  for all the buckets</span><br><span class="line">    put elements into buckets matching the range</span><br><span class="line">  for all the buckets </span><br><span class="line">    sort elements in each bucket</span><br><span class="line">  gather elements from each bucket</span><br><span class="line">end bucketSort</span><br></pre></td></tr></table></figure><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Bucket sort in Java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BucketSort</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">bucketSort</span><span class="params">(<span class="type">float</span>[] arr, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">0</span>)</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    ArrayList&lt;Float&gt;[] bucket = <span class="keyword">new</span> <span class="title class_">ArrayList</span>[n];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Create empty buckets</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">      bucket[i] = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Float&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Add elements into the buckets</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">      <span class="type">int</span> <span class="variable">bucketIndex</span> <span class="operator">=</span> (<span class="type">int</span>) arr[i] * n;</span><br><span class="line">      bucket[bucketIndex].add(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sort the elements of each bucket</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">      Collections.sort((bucket[i]));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get the sorted array</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>, size = bucket[i].size(); j &lt; size; j++) &#123;</span><br><span class="line">        arr[index++] = bucket[i].get(j);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Driver code</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">BucketSort</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BucketSort</span>();</span><br><span class="line">    <span class="type">float</span>[] arr = &#123; (<span class="type">float</span>) <span class="number">0.42</span>, (<span class="type">float</span>) <span class="number">0.32</span>, (<span class="type">float</span>) <span class="number">0.33</span>, (<span class="type">float</span>) <span class="number">0.52</span>, (<span class="type">float</span>) <span class="number">0.37</span>, (<span class="type">float</span>) <span class="number">0.47</span>,</span><br><span class="line">        (<span class="type">float</span>) <span class="number">0.51</span> &#125;;</span><br><span class="line">    b.bucketSort(arr, <span class="number">7</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">float</span> i : arr)</span><br><span class="line">      System.out.print(i + <span class="string">&quot;  &quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="Radix-Sort"><a href="#Radix-Sort" class="headerlink" title=" Radix Sort"></a><font color = "pink"> Radix Sort</font></h1><ol><li><p>Find the largest element in the array, i.e. max. Let <code>X</code> be the number of digits in <code>max</code>. <code>X</code> is calculated because we have to go through all the significant places of all elements.</p><p>In this array <code>[121, 432, 564, 23, 1, 45, 788]</code>, we have the largest number 788. It has 3 digits. Therefore, the loop should go up to hundreds place (3 times).</p></li><li><p>Now, go through each significant place one by one.</p><p>Use any stable sorting technique to sort the digits at each significant place. We have used counting sort for this.</p><p>Sort the elements based on the unit place digits (X&#x3D;0).</p><p><img src="https://www.programiz.com/sites/tutorial2program/files/Radix-sort-one.png" alt="Radix Sort working with Counting Sort as intermediate step"></p></li><li><p>Now, sort the elements based on digits at tens place.</p><p><img src="https://www.programiz.com/sites/tutorial2program/files/Radix-sort-ten.png" alt="Radix Sort Step"></p></li><li><p>Finally, sort the elements based on the digits at hundreds place.</p><p><img src="https://www.programiz.com/sites/tutorial2program/files/Radix-sort-hundred.png" alt="Selection Sort Step"></p></li></ol><h2 id="Pseudocode-2"><a href="#Pseudocode-2" class="headerlink" title="Pseudocode"></a>Pseudocode</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">radixSort(array)</span><br><span class="line">  d &lt;- maximum number of digits in the largest element</span><br><span class="line">  create d buckets of size 0-9</span><br><span class="line">  for i &lt;- 0 to d</span><br><span class="line">    sort the elements according to ith place digits using countingSort</span><br><span class="line"></span><br><span class="line">countingSort(array, d)</span><br><span class="line">  max &lt;- find largest element among dth place elements</span><br><span class="line">  initialize count array with all zeros</span><br><span class="line">  for j &lt;- 0 to size</span><br><span class="line">    find the total count of each unique digit in dth place of elements and</span><br><span class="line">    store the count at jth index in count array</span><br><span class="line">  for i &lt;- 1 to max</span><br><span class="line">    find the cumulative sum and store it in count array itself</span><br><span class="line">  for j &lt;- size down to 1</span><br><span class="line">    restore the elements to array</span><br><span class="line">    decrease count of each element restored by 1</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Java-1"><a href="#Java-1" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Radix Sort in Java Programming</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RadixSort</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Using counting sort to sort the elements in the basis of significant places</span></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">countingSort</span><span class="params">(<span class="type">int</span> array[], <span class="type">int</span> size, <span class="type">int</span> place)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] output = <span class="keyword">new</span> <span class="title class_">int</span>[size + <span class="number">1</span>];</span><br><span class="line">    <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> array[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; size; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (array[i] &gt; max)</span><br><span class="line">        max = array[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span>[] count = <span class="keyword">new</span> <span class="title class_">int</span>[max + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; max; ++i)</span><br><span class="line">      count[i] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Calculate count of elements</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">      count[(array[i] / place) % <span class="number">10</span>]++;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Calculate cumulative count</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">      count[i] += count[i - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Place the elements in sorted order</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> size - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">      output[count[(array[i] / place) % <span class="number">10</span>] - <span class="number">1</span>] = array[i];</span><br><span class="line">      count[(array[i] / place) % <span class="number">10</span>]--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">      array[i] = output[i];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Function to get the largest element from an array</span></span><br><span class="line">  <span class="type">int</span> <span class="title function_">getMax</span><span class="params">(<span class="type">int</span> array[], <span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> array[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">      <span class="keyword">if</span> (array[i] &gt; max)</span><br><span class="line">        max = array[i];</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Main function to implement radix sort</span></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">radixSort</span><span class="params">(<span class="type">int</span> array[], <span class="type">int</span> size)</span> &#123;</span><br><span class="line">    <span class="comment">// Get maximum element</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> getMax(array, size);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Apply counting sort to sort elements based on place value.</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">place</span> <span class="operator">=</span> <span class="number">1</span>; max / place &gt; <span class="number">0</span>; place *= <span class="number">10</span>)</span><br><span class="line">      countingSort(array, size, place);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Driver code</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] data = &#123; <span class="number">121</span>, <span class="number">432</span>, <span class="number">564</span>, <span class="number">23</span>, <span class="number">1</span>, <span class="number">45</span>, <span class="number">788</span> &#125;;</span><br><span class="line">    <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> data.length;</span><br><span class="line">    <span class="type">RadixSort</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RadixSort</span>();</span><br><span class="line">    rs.radixSort(data, size);</span><br><span class="line">    System.out.println(<span class="string">&quot;Sorted Array in Ascending Order: &quot;</span>);</span><br><span class="line">    System.out.println(Arrays.toString(data));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="5-Heap-Sort"><a href="#5-Heap-Sort" class="headerlink" title="¬†5. Heap Sort"></a><font color = "pink">¬†5. Heap Sort</font></h1><h1 id="Complexity"><a href="#Complexity" class="headerlink" title=" Complexity"></a><font color = "pink"> Complexity</font></h1><h2 id="Quicksort-Complexity"><a href="#Quicksort-Complexity" class="headerlink" title="Quicksort Complexity"></a><font color = "watermel">Quicksort Complexity</font></h2><table><thead><tr><th align="left"><strong>Time Complexity</strong></th><th></th></tr></thead><tbody><tr><td align="left">Best</td><td>O(n*log n)</td></tr><tr><td align="left">Worst</td><td>O(n2)</td></tr><tr><td align="left">Average</td><td>O(n*log n)</td></tr><tr><td align="left"><strong>Space Complexity</strong></td><td>O(log n)</td></tr><tr><td align="left"><strong>Stability</strong></td><td>No</td></tr></tbody></table><ul><li><p><strong>Worst Case Complexity [Big-O]</strong>: <code>O(n2)</code><br>It occurs when the pivot element picked is <u>either the greatest or the smallest element</u>.</p><p>This condition leads to the case in which the pivot element lies in an extreme end of the sorted array. <u>One sub-array is always empty and another sub-array contains <code>n - 1</code> elements. Thus, quicksort is called only on this sub-array</u>.</p><p>However, the quicksort algorithm has better performance for scattered pivots.</p></li><li><p><strong>Best Case Complexity [Big-omega]</strong>: <code>O(n*log n)</code><br>It occurs when the pivot element is always the <u>middle</u> element or near to the middle element.</p></li><li><p><strong>Average Case Complexity [Big-theta]</strong>: <code>O(n*log n)</code><br>It occurs when the above conditions do not occur.</p></li></ul><h2 id="Merge-Sort-Complexity"><a href="#Merge-Sort-Complexity" class="headerlink" title="Merge Sort Complexity"></a><font color = "watermel">Merge Sort Complexity</font></h2><table><thead><tr><th align="left"><strong>Time Complexity</strong></th><th></th></tr></thead><tbody><tr><td align="left">Best</td><td>O(n*log n)</td></tr><tr><td align="left">Worst</td><td>O(n*log n)</td></tr><tr><td align="left">Average</td><td>O(n*log n)</td></tr><tr><td align="left"><strong>Space Complexity</strong></td><td>O(n)</td></tr><tr><td align="left"><strong>Stability</strong></td><td>Yes</td></tr></tbody></table><h2 id="Counting-Sort-Complexity"><a href="#Counting-Sort-Complexity" class="headerlink" title="Counting Sort Complexity"></a><font color = "watermel">Counting Sort Complexity</font></h2><table><thead><tr><th align="left"><strong>Time Complexity</strong></th><th></th></tr></thead><tbody><tr><td align="left">Best</td><td>O(n+k)</td></tr><tr><td align="left">Worst</td><td>O(n+k)</td></tr><tr><td align="left">Average</td><td>O(n+k)</td></tr><tr><td align="left"><strong>Space Complexity</strong></td><td>O(max)</td></tr><tr><td align="left"><strong>Stability</strong></td><td>Yes</td></tr></tbody></table><p><strong>Time Complexities</strong></p><p>There are mainly four main loops. (Finding the greatest value can be done outside the function.)</p><table><thead><tr><th align="left">for-loop</th><th align="left">time of counting</th></tr></thead><tbody><tr><td align="left">1st</td><td align="left">O(max)</td></tr><tr><td align="left">2nd</td><td align="left">O(size)</td></tr><tr><td align="left">3rd</td><td align="left">O(max)</td></tr><tr><td align="left">4th</td><td align="left">O(size)</td></tr></tbody></table><p>Overall complexity &#x3D; <code>O(max)+O(size)+O(max)+O(size)</code> &#x3D; <code>O(max+size)</code>  max -&gt; n, size-&gt;k</p><ul><li><strong>Worst Case Complexity:</strong> <code>O(n+k)</code></li><li><strong>Best Case Complexity:</strong> <code>O(n+k)</code></li><li><strong>Average Case Complexity:</strong> <code>O(n+k)</code></li></ul><p>In all the above cases, the complexity is the same because no matter how the elements are placed in the array, the algorithm goes through <code>n+k</code> times.</p><p>The space complexity of Counting Sort is <code>O(max)</code>. Larger the range of elements, larger is the space complexity.</p><h2 id="Bucket-Sort-Complexity"><a href="#Bucket-Sort-Complexity" class="headerlink" title="Bucket Sort Complexity"></a><font color = "watermel">Bucket Sort Complexity</font></h2><table><thead><tr><th align="left"><strong>Time Complexity</strong></th><th></th></tr></thead><tbody><tr><td align="left">Best</td><td>O(n+k)</td></tr><tr><td align="left">Worst</td><td>O(n2)</td></tr><tr><td align="left">Average</td><td>O(n)</td></tr><tr><td align="left"><strong>Space Complexity</strong></td><td>O(n+k)</td></tr><tr><td align="left"><strong>Stability</strong></td><td>Yes</td></tr></tbody></table><ul><li><strong>Worst Case Complexity:</strong> <code>O(n2)</code><br>When there are elements of close range in the array, they are likely to be placed in the same bucket. This may result in some buckets having more number of elements than others.<br>It makes the complexity depend on the sorting algorithm used to sort the elements of the bucket.<br>The complexity becomes even worse when the elements are in reverse order. If insertion sort is used to sort elements of the bucket, then the time complexity becomes <code>O(n2)</code>.</li><li><strong>Best Case Complexity:</strong> <code>O(n+k)</code><br>It occurs when the elements are uniformly distributed in the buckets with a nearly equal number of elements in each bucket.<br>The complexity becomes even better if the elements inside the buckets are already sorted.<br>If insertion sort is used to sort elements of a bucket then the overall complexity in the best case will be linear ie. <code>O(n+k)</code>. <code>O(n)</code> is the complexity for making the buckets and <code>O(k)</code> is the complexity for sorting the elements of the bucket using algorithms having linear time complexity at the best case.</li><li><strong>Average Case Complexity:</strong> <code>O(n)</code><br>It occurs when the elements are distributed randomly in the array. Even if the elements are not distributed uniformly, bucket sort runs in linear time. It holds true until the sum of the squares of the bucket sizes is linear in the total number of elements.</li></ul><h2 id="Radix-Sort-Complexity"><a href="#Radix-Sort-Complexity" class="headerlink" title="Radix Sort Complexity"></a><font color = "watermel">Radix Sort Complexity</font></h2><table><thead><tr><th align="left"><strong>Time Complexity</strong></th><th></th></tr></thead><tbody><tr><td align="left">Best</td><td>O(n+k)</td></tr><tr><td align="left">Worst</td><td>O(n+k)</td></tr><tr><td align="left">Average</td><td>O(n+k)</td></tr><tr><td align="left"><strong>Space Complexity</strong></td><td>O(max)</td></tr><tr><td align="left"><strong>Stability</strong></td><td>Yes</td></tr></tbody></table><hr><p>Since radix sort is a non-comparative algorithm, it has advantages over comparative sorting algorithms.</p><p>For the radix sort that uses counting sort as an intermediate stable sort, the time complexity is <code>O(d(n+k))</code>.</p><p>Thus, radix sort has linear time complexity which is better than <code>O(nlog n)</code> of comparative sorting algorithms.</p><p>If we take very large digit numbers or the number of other bases like 32-bit and 64-bit numbers then it can perform in linear time however the intermediate sort takes large space.</p><p>This makes radix sort space inefficient. This is the reason why this sort is not used in software libraries.</p><p>[TOC]</p>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Array &amp; Hash</title>
      <link href="/2023/02/13/Array%20&amp;%20Hash/"/>
      <url>/2023/02/13/Array%20&amp;%20Hash/</url>
      
        <content type="html"><![CDATA[<h1 id="Array-amp-Hash-üåº"><a href="#Array-amp-Hash-üåº" class="headerlink" title="Array &amp; Hash üåº"></a>Array &amp; Hash üåº</h1><h1 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h1><h2 id="Interface"><a href="#Interface" class="headerlink" title="Interface"></a>Interface</h2><p>An <code>interface</code> is a completely ‚Äú<strong>abstract class</strong>‚Äú that is used to group related methods with <strong>empty bodies</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// interface</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">animalSound</span><span class="params">()</span>; <span class="comment">// interface method (does not have a body)</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>; <span class="comment">// interface method (does not have a body)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>To access the interface methods, the interface must be ‚Äúimplemented‚Äù (kinda like inherited) by another class with the <code>implements</code> keyword (instead of <code>extends</code>). The body of the interface method is provided by the ‚Äúimplement‚Äù class:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Interface</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">animalSound</span><span class="params">()</span>; <span class="comment">// interface method (does not have a body)</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span>; <span class="comment">// interface method (does not have a body)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Pig &quot;implements&quot; the Animal interface</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Pig</span> <span class="keyword">implements</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">animalSound</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// The body of animalSound() is provided here</span></span><br><span class="line">    System.out.println(<span class="string">&quot;The pig says: wee wee&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// The body of sleep() is provided here</span></span><br><span class="line">    System.out.println(<span class="string">&quot;Zzz&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Pig</span> <span class="variable">myPig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Pig</span>();  <span class="comment">// Create a Pig object</span></span><br><span class="line">    myPig.animalSound();</span><br><span class="line">    myPig.sleep();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br></pre></td></tr></table></figure><p><strong>Notes on Interfaces:</strong></p><ul><li>Like <strong>abstract classes</strong>, interfaces <strong>cannot</strong> be used to create objects (in the example above, it is not possible to create an ‚ÄúAnimal‚Äù object in the MyMainClass)</li><li>Interface methods do not have a body - the body is provided by the ‚Äúimplement‚Äù class</li><li>On implementation of an interface, you must <strong>override all of its methods</strong></li><li>Interface methods are by default <code>abstract</code> and <code>public</code></li><li>Interface attributes are by default <code>public</code>, <code>static</code> and <code>final</code></li><li>An interface <strong>cannot contain a constructor</strong> (as it cannot be used to create objects)</li></ul><p><strong>Why And When To Use Interfaces?</strong></p><ol><li><p>To achieve <strong>security</strong> - hide certain details and only show the important details of an object (interface).</p></li><li><p>Java does not support ‚Äúmultiple inheritance‚Äù (a class can only inherit from one superclass). However, it can be achieved with interfaces, because the class can <strong>implement multiple interfaces.</strong> <strong>Note:</strong> To implement multiple interfaces, separate them with a comma (see example below).</p></li></ol><h2 id="Lambda-expression"><a href="#Lambda-expression" class="headerlink" title="Lambda expression"></a>Lambda expression</h2><p>Lambda Expressions were added in Java 8.</p><p>A lambda expression is a short block of code which takes in parameters and returns a value. Lambda expressions are similar to methods, but they do not need a name and they can be implemented right in the body of a method.</p><p>Syntax</p><p>The simplest lambda expression contains a single parameter and an expression:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">parameter -&gt; expression</span><br></pre></td></tr></table></figure><p>To use more than one parameter, wrap them in parentheses:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(parameter1, parameter2) -&gt; expression</span><br></pre></td></tr></table></figure><p>Expressions are limited. They have to immediately return a value, and they cannot contain variables, assignments or statements such as <code>if</code> or <code>for</code>. In order to do more complex operations, a code block can be used with curly braces. If the lambda expression needs to return a value, then the code block should have a <code>return</code> statement.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(parameter1, parameter2) -&gt; &#123; code block &#125;</span><br></pre></td></tr></table></figure><p>Example</p><p>Use a lambda expression in the <code>ArrayList</code>‚Äòs <code>forEach()</code> method to print every item in the list:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    ArrayList&lt;Integer&gt; numbers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line">    numbers.add(<span class="number">5</span>);</span><br><span class="line">    numbers.add(<span class="number">9</span>);</span><br><span class="line">    numbers.add(<span class="number">8</span>);</span><br><span class="line">    numbers.add(<span class="number">1</span>);</span><br><span class="line">    numbers.forEach( (n) -&gt; &#123; System.out.println(n); &#125; );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output:</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>To use a lambda expression in a method, <strong>the method should have a parameter with a single-method interface as its type</strong>. Calling the interface‚Äôs method will run the lambda expression:</p><p>Example</p><p>Create a method which takes a lambda expression as a parameter:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">StringFunction</span> &#123;</span><br><span class="line">  String <span class="title function_">run</span><span class="params">(String str)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">StringFunction</span> <span class="variable">exclaim</span> <span class="operator">=</span> (s) -&gt; s + <span class="string">&quot;!&quot;</span>;   </span><br><span class="line">    <span class="type">StringFunction</span> <span class="variable">ask</span> <span class="operator">=</span> (s) -&gt; s + <span class="string">&quot;?&quot;</span>;</span><br><span class="line">    printFormatted(<span class="string">&quot;Hello&quot;</span>, exclaim);</span><br><span class="line">    printFormatted(<span class="string">&quot;Hello&quot;</span>, ask);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printFormatted</span><span class="params">(String str, StringFunction format)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> format.run(str);</span><br><span class="line">    System.out.println(result);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Hello!</span><br><span class="line">Hello?</span><br></pre></td></tr></table></figure><h2 id="Double-colon-operator"><a href="#Double-colon-operator" class="headerlink" title="Double colon :: operator"></a>Double colon :: operator</h2><p>They behave exactly as the lambda expressions. The only difference it has from lambda expressions is that this uses direct reference to the method by name instead of providing a delegate to the method.</p><p><strong>Syntax:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Class name&gt;::&lt;method name&gt;</span><br></pre></td></tr></table></figure><p><strong>Example:</strong> To print all elements of the stream:</p><ul><li><p>Using Lambda expression:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stream.forEach( s-&gt; System.out.println(s));</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Java code to print the elements of Stream</span></span><br><span class="line"><span class="comment">// without using double colon operator</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.util.stream.*;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GFG</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> `main(String[] args)</span><br><span class="line">  &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// Get the stream</span></span><br><span class="line">    Stream&lt;String&gt; stream</span><br><span class="line">      = Stream.of(<span class="string">&quot;Geeks&quot;</span>, <span class="string">&quot;For&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Geeks&quot;</span>, <span class="string">&quot;A&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Computer&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Portal&quot;</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// Print the stream</span></span><br><span class="line">    stream.forEach(s -&gt; System.out.println(s));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Output:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Geeks</span><br><span class="line">For</span><br><span class="line">Geeks</span><br><span class="line">A</span><br><span class="line">Computer</span><br><span class="line">Portal</span><br></pre></td></tr></table></figure><p>Using double colon operator:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stream.forEach( System.out::println);</span><br></pre></td></tr></table></figure><p><strong>When and how to use double colon operator?</strong></p><p>Method reference or double colon operator can be used to refer:</p><ul><li>a static method,</li><li>an instance method, or</li><li>a constructor.</li></ul><p>How to use method reference in Java:</p><ol><li><p>Static method</p><p><strong>Syntax:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(ClassName::methodName)</span><br></pre></td></tr></table></figure><p><strong>Example:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SomeClass::someStaticMethod</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Java code to show use of double colon operator</span></span><br><span class="line"><span class="comment">// for static methods</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GFG</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// static function to be called</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">someFunction</span><span class="params">(String s)</span></span><br><span class="line">&#123;</span><br><span class="line">System.out.println(s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">list.add(<span class="string">&quot;Geeks&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;For&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;GEEKS&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// call the static method</span></span><br><span class="line"><span class="comment">// using double colon operator</span></span><br><span class="line">list.forEach(GFG::someFunction);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Output:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Geeks</span><br><span class="line">For</span><br><span class="line">GEEKS</span><br></pre></td></tr></table></figure><ol start="2"><li>Instance method</li></ol><p><strong>Syntax:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(objectOfClass::methodName)</span><br></pre></td></tr></table></figure><p><strong>Example:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out::println</span><br></pre></td></tr></table></figure><p><strong>Program:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">// Java code to show use of double colon operator</span><br><span class="line">// for instance methods</span><br><span class="line"></span><br><span class="line">import java.util.*;</span><br><span class="line"></span><br><span class="line">class GFG &#123;</span><br><span class="line"></span><br><span class="line">// instance function to be called</span><br><span class="line">void someFunction(String s)</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">List&lt;String&gt; list = new ArrayList&lt;String&gt;();</span><br><span class="line">list.add(&quot;Geeks&quot;);</span><br><span class="line">list.add(&quot;For&quot;);</span><br><span class="line">list.add(&quot;GEEKS&quot;);</span><br><span class="line"></span><br><span class="line">// call the instance method</span><br><span class="line">// using double colon operator</span><br><span class="line">list.forEach((new GFG())::someFunction);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Output:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Geeks</span><br><span class="line">For</span><br><span class="line">GEEKS</span><br></pre></td></tr></table></figure><p><a href="https://www.geeksforgeeks.org/double-colon-operator-in-java/">https://www.geeksforgeeks.org/double-colon-operator-in-java/</a></p><h1 id="Leetcode"><a href="#Leetcode" class="headerlink" title="Leetcode"></a>Leetcode</h1><h2 id="1-Two-Sum"><a href="#1-Two-Sum" class="headerlink" title="1. Two Sum"></a>1. Two Sum</h2><p>Easy</p><p>Given an array of integers <code>nums</code> and an integer <code>target</code>, return <em>indices of the two numbers such that they add up to <code>target</code></em>.</p><p>You may assume that each input would have *<strong>exactly* one solution</strong>, and you may not use the <em>same</em> element twice.</p><p>You can return the answer in any order.</p><p><strong>Example 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [2,7,11,15], target = 9</span><br><span class="line">Output: [0,1]</span><br><span class="line">Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [3,2,4], target = 6</span><br><span class="line">Output: [1,2]</span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [3,3], target = 6</span><br><span class="line">Output: [0,1]</span><br></pre></td></tr></table></figure><p><strong>üåüCoding:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="type">int</span>[] twoSum(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123; </span><br><span class="line">      <span class="comment">// use HashMap to record the values in num and the order of num[i]</span></span><br><span class="line">      <span class="comment">// also HashMap can find elements fast ,using containsKey containsValue function</span></span><br><span class="line">‚Äã    HashMap&lt;Integer, Integer&gt; mark = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Integer, Integer&gt;(); </span><br><span class="line"></span><br><span class="line">‚Äã    <span class="keyword">for</span>( <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i ++)&#123;</span><br><span class="line"></span><br><span class="line">‚Äã    <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> nums[i];</span><br><span class="line"></span><br><span class="line">‚Äã       <span class="type">int</span> <span class="variable">diff</span> <span class="operator">=</span> target - num;</span><br><span class="line"></span><br><span class="line">‚Äã       <span class="keyword">if</span>(mark.containsKey(diff))&#123;</span><br><span class="line"></span><br><span class="line">‚Äã       <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;mark.get(diff),i&#125;;</span><br><span class="line"></span><br><span class="line">‚Äã       &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">‚Äã           mark.put(num, i);</span><br><span class="line"></span><br><span class="line">‚Äã       &#125;</span><br><span class="line"></span><br><span class="line">‚Äã       &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;&#125;;  </span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="49-Group-Anagrams"><a href="#49-Group-Anagrams" class="headerlink" title="49. Group Anagrams"></a>49. Group Anagrams</h2><p>Medium</p><p>Given an array of strings <code>strs</code>, group <strong>the anagrams</strong> together. You can return the answer in <strong>any order</strong>.</p><p>An <strong>Anagram</strong> is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.</p><p><strong>Example 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: strs = [&quot;eat&quot;,&quot;tea&quot;,&quot;tan&quot;,&quot;ate&quot;,&quot;nat&quot;,&quot;bat&quot;]</span><br><span class="line">Output: [[&quot;bat&quot;],[&quot;nat&quot;,&quot;tan&quot;],[&quot;ate&quot;,&quot;eat&quot;,&quot;tea&quot;]]</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: strs = [&quot;&quot;]</span><br><span class="line">Output: [[&quot;&quot;]]</span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: strs = [&quot;a&quot;]</span><br><span class="line">Output: [[&quot;a&quot;]]</span><br></pre></td></tr></table></figure><p><strong>üåüCoding:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="title function_">groupAnagrams</span><span class="params">(String[] strs)</span> &#123;</span><br><span class="line">        <span class="comment">//returned value</span></span><br><span class="line">        List&lt;List&lt;String&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// check input </span></span><br><span class="line">        <span class="keyword">if</span> (strs.length == <span class="number">0</span>) <span class="keyword">return</span> res;</span><br><span class="line">        <span class="comment">// Use computeIfAbsent of HashMap to check if it has previous anagrams</span></span><br><span class="line">        <span class="comment">// String -&gt; int[] Hash; List&lt;String&gt; -&gt; String s</span></span><br><span class="line">        HashMap&lt;String, List&lt;String&gt;&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String s : strs) &#123;</span><br><span class="line">            <span class="comment">// use int array to record component letters of each s </span></span><br><span class="line">            <span class="type">int</span>[] hash = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">char</span> c : s.toCharArray()) &#123;</span><br><span class="line">                hash[c - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// turn int array into string so we can compare if there&#x27;s same key</span></span><br><span class="line">            <span class="comment">// if we don&#x27;t turn into string here then we need to do a loop for 26 times to see if there&#x27;s a same hash before which is not worth it</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(Arrays.toString(hash)); üåü</span><br><span class="line">            <span class="comment">//use computeIfAbsent to see if there&#x27;s a anagram of s before </span></span><br><span class="line">            <span class="comment">// if no then create a new arraylist in value</span></span><br><span class="line">            <span class="comment">// if yes then computeIfAbsent won&#x27;t do anything</span></span><br><span class="line">            map.computeIfAbsent(key, k -&gt; <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;()); üåüüåü </span><br><span class="line">            <span class="comment">// s will be added to the existing arraylist</span></span><br><span class="line">            map.get(key).add(s); üåü</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// values of the HashMap(trype: List&lt;String&gt;) are the answer</span></span><br><span class="line">        res.addAll(map.values()); üåü</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‚≠ï For List, it‚Äôs addAll; </p><p>‚Äã      For HashMap, it‚Äôs putAll</p><p>‚≠ï List&lt;List<String>&gt; res &#x3D; new ArrayList&lt;&gt;<font color = "red">()</font>;     remember there‚Äôs a parenthesis</p><p>‚≠ï It‚Äôs  Arrays.toString(hash), instead of hash.Arrays.toString()</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">map.computeIfAbsent(key, k -&gt; new ArrayList&lt;&gt;()); </span><br><span class="line">map.get(key).add(s); </span><br></pre></td></tr></table></figure><p>the above is equal to the following:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if(! map.containsKey(mid))&#123;</span><br><span class="line">List&lt;String&gt; x = new ArrayList&lt;&gt;();</span><br><span class="line">   map.put(mid, x);</span><br><span class="line"> &#125;</span><br><span class="line"> map.get(mid).add(s);</span><br></pre></td></tr></table></figure><h2 id="347-Top-K-Frequent-Elements"><a href="#347-Top-K-Frequent-Elements" class="headerlink" title="347. Top K Frequent Elements"></a>347. Top K Frequent Elements</h2><p>Medium</p><p>Given an integer array <code>nums</code> and an integer <code>k</code>, return <em>the</em> <code>k</code> <em>most frequent elements</em>. You may return the answer in <strong>any order</strong>.</p><p><strong>Example 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [1,1,1,2,2,3], k = 2</span><br><span class="line">Output: [1,2]</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [1], k = 1</span><br><span class="line">Output: [1]</span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 105</code></li><li><code>-104 &lt;= nums[i] &lt;= 104</code></li><li><code>k</code> is in the range <code>[1, the number of unique elements in the array]</code>.</li><li>It is <strong>guaranteed</strong> that the answer is <strong>unique</strong>.</li></ul><p><strong>Follow up:</strong> Your algorithm‚Äôs time complexity must be better than <code>O(n log n)</code>, where n is the array‚Äôs size.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution3</span> &#123;</span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Time Complexity: O(n)</span></span><br><span class="line"><span class="comment">     * Space Complexity: O(n)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">     <span class="keyword">public</span> <span class="type">int</span>[] topKFrequent(<span class="type">int</span>[] nums, <span class="type">int</span> k) &#123;</span><br><span class="line">        Map&lt;Integer, Integer&gt; count = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(); </span><br><span class="line">        <span class="comment">//key: number. value: times of number appeared</span></span><br><span class="line">        List&lt;Integer&gt; bucket[] = <span class="keyword">new</span> <span class="title class_">ArrayList</span>[nums.length + <span class="number">1</span>];                <span class="comment">// sort map&#x27;s value</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums)</span><br><span class="line">            count.merge(num, <span class="number">1</span>, Integer::sum); <span class="comment">// calculate times</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> key : count.keySet())&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">freq</span> <span class="operator">=</span> count.get(key);</span><br><span class="line">            <span class="keyword">if</span> (bucket[freq] == <span class="literal">null</span>)</span><br><span class="line">                bucket[freq] = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(); </span><br><span class="line">            bucket[freq].add(key);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[k];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> nums.length; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">            <span class="keyword">if</span> (bucket[i] != <span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> val : bucket[i])&#123;</span><br><span class="line">                    res[index++] = val;</span><br><span class="line">                    <span class="keyword">if</span>(index == k)</span><br><span class="line">                        <span class="keyword">return</span> res;</span><br><span class="line">                &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">       </span><br></pre></td></tr></table></figure><p>‚≠ï The syntax of the <code>merge()</code> method is:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hashmap.merge(key, value, BiFunction remappingFunction)</span><br></pre></td></tr></table></figure><p><strong>Parameters:</strong> This method accepts three parameters:</p><ul><li><strong>Key:</strong> which is the key for which we have a particular value. If two keys have the same value they are merged.</li><li><strong>Value:</strong> which is the index corresponding to the particular key which is stored in the bucket.</li><li><strong>BiFunction:</strong> which is the function having two arguments to be used for calculating the new mapping from the old value and given value.</li></ul><p><strong>Return Value:</strong> This method returns the key along with its value if the key is not present or is associated with null. Else if the key already holds any value, it merges the old value with the new value using the mapping technique.</p><p>[toc]</p>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>TwoPointer</title>
      <link href="/2023/02/13/TwoPointer/"/>
      <url>/2023/02/13/TwoPointer/</url>
      
        <content type="html"><![CDATA[<h1 id="TwoPointer-üåº"><a href="#TwoPointer-üåº" class="headerlink" title="TwoPointer üåº"></a>TwoPointer üåº</h1><h2 id="27-Remove-Element"><a href="#27-Remove-Element" class="headerlink" title="27. Remove Element"></a><a href="https://leetcode.com/problems/remove-element/">27. Remove Element</a></h2><p>Easy</p><p>Given an integer array <code>nums</code> and an integer <code>val</code>, remove all occurrences of <code>val</code> in <code>nums</code> <a href="https://en.wikipedia.org/wiki/In-place_algorithm"><strong>in-place</strong></a>. The relative order of the elements may be changed.</p><p>Since it is imSSpossible to change the length of the array in some languages, you must instead have the result be placed in the <strong>first part</strong> of the array <code>nums</code>. More formally, if there are <code>k</code> elements after removing the duplicates, then the first <code>k</code> elements of <code>nums</code> should hold the final result. It does not matter what you leave beyond the first <code>k</code> elements.</p><p>Return <code>k</code> <em>after placing the final result in the first</em> <code>k</code> <em>slots of</em> <code>nums</code>.</p><p>Do <strong>not</strong> allocate extra space for another array. You must do this by <strong>modifying the input array <a href="https://en.wikipedia.org/wiki/In-place_algorithm">in-place</a></strong> with O(1) extra memory.</p><p><strong>Custom Judge:</strong></p><p>The judge will test your solution with the following code:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">int[] nums = [...]; // Input array</span><br><span class="line">int val = ...; // Value to remove</span><br><span class="line">int[] expectedNums = [...]; // The expected answer with correct length.</span><br><span class="line">                            // It is sorted with no values equaling val.</span><br><span class="line"></span><br><span class="line">int k = removeElement(nums, val); // Calls your implementation</span><br><span class="line"></span><br><span class="line">assert k == expectedNums.length;</span><br><span class="line">sort(nums, 0, k); // Sort the first k elements of nums</span><br><span class="line">for (int i = 0; i &lt; actualLength; i++) &#123;</span><br><span class="line">    assert nums[i] == expectedNums[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>If all assertions pass, then your solution will be <strong>accepted</strong>.</p><p><strong>Example 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [3,2,2,3], val = 3</span><br><span class="line">Output: 2, nums = [2,2,_,_]</span><br><span class="line">Explanation: Your function should return k = 2, with the first two elements of nums being 2.</span><br><span class="line">It does not matter what you leave beyond the returned k (hence they are underscores).</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [0,1,2,2,3,0,4,2], val = 2</span><br><span class="line">Output: 5, nums = [0,1,4,0,3,_,_,_]</span><br><span class="line">Explanation: Your function should return k = 5, with the first five elements of nums containing 0, 0, 1, 3, and 4.</span><br><span class="line">Note that the five elements can be returned in any order.</span><br><span class="line">It does not matter what you leave beyond the returned k (hence they are underscores).</span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li><code>0 &lt;= nums.length &lt;= 100</code></li><li><code>0 &lt;= nums[i] &lt;= 50</code></li><li><code>0 &lt;= val &lt;= 100</code></li></ul><p><strong>üåüCoding:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">removeElement</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span> ; i &lt; nums.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] != val)&#123;</span><br><span class="line">                nums[flag] = nums[i];</span><br><span class="line">                flag ++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flag;     </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="344-Reverse-String"><a href="#344-Reverse-String" class="headerlink" title="344. Reverse String"></a>344. Reverse String</h2><p>Easy</p><p>Write a function that reverses a string. The input string is given as an array of characters <code>s</code>.</p><p>You must do this by modifying the input array <a href="https://en.wikipedia.org/wiki/In-place_algorithm">in-place</a> with <code>O(1)</code> extra memory. </p><p><strong>Example 1:</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: s = [&quot;h&quot;,&quot;e&quot;,&quot;l&quot;,&quot;l&quot;,&quot;o&quot;]</span><br><span class="line">Output: [&quot;o&quot;,&quot;l&quot;,&quot;l&quot;,&quot;e&quot;,&quot;h&quot;]</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: s = [&quot;H&quot;,&quot;a&quot;,&quot;n&quot;,&quot;n&quot;,&quot;a&quot;,&quot;h&quot;]</span><br><span class="line">Output: [&quot;h&quot;,&quot;a&quot;,&quot;n&quot;,&quot;n&quot;,&quot;a&quot;,&quot;H&quot;]</span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= s.length &lt;= 105</code></li><li><code>s[i]</code> is a <a href="https://en.wikipedia.org/wiki/ASCII#Printable_characters">printable ascii character</a>.</li></ul><p><strong>üåüCoding:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reverseString</span><span class="params">(<span class="type">char</span>[] s)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">tail</span> <span class="operator">=</span> s.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length/<span class="number">2</span>; i++)&#123;</span><br><span class="line">            <span class="type">char</span> temp;</span><br><span class="line">            temp = s[i];</span><br><span class="line">            s[i] = s[tail];</span><br><span class="line">            s[tail] = temp;</span><br><span class="line">            tail --;</span><br><span class="line">        &#125;     </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="125-Valid-Palindrome"><a href="#125-Valid-Palindrome" class="headerlink" title="125.Valid Palindrome"></a>125.Valid Palindrome</h2><p>Easy</p><p>A phrase is a <strong>palindrome</strong> if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers.</p><p>Given a string <code>s</code>, return <code>true</code> <em>if it is a <strong>palindrome</strong>, or</em> <code>false</code> <em>otherwise</em>.</p><p><strong>Example 1:</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: s = &quot;A man, a plan, a canal: Panama&quot;</span><br><span class="line">Output: true</span><br><span class="line">Explanation: &quot;amanaplanacanalpanama&quot; is a palindrome.</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: s = &quot;race a car&quot;</span><br><span class="line">Output: false</span><br><span class="line">Explanation: &quot;raceacar&quot; is not a palindrome.</span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: s = &quot; &quot;</span><br><span class="line">Output: true</span><br><span class="line">Explanation: s is an empty string &quot;&quot; after removing non-alphanumeric characters.</span><br><span class="line">Since an empty string reads the same forward and backward, it is a palindrome.</span><br></pre></td></tr></table></figure><p><strong>üåüCoding:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isPalindrome</span><span class="params">(String s)</span> &#123;</span><br><span class="line">       </span><br><span class="line">        <span class="type">int</span> start ;</span><br><span class="line">        <span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> s.length() - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(start = <span class="number">0</span>; start &lt;= end; )&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(!Character.isLetterOrDigit( s.charAt(start) ))&#123;</span><br><span class="line">                start ++;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!Character.isLetterOrDigit( s.charAt(end) ))&#123;</span><br><span class="line">                end --;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>( Character.toLowerCase( s.charAt(start)) !=  Character.toLowerCase(s.charAt(end)) )&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                start ++;</span><br><span class="line">                end --;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‚≠ï Character.isLetterOrDigit( char )</p><p>‚≠ï Character.toLowerCase( char )</p><p>‚≠ï String s -&gt; s.length();</p><p>‚Äã  char[] s -&gt; s.length;</p><h2 id="167-Two-Sum-II-Input-Array-Is-Sorted"><a href="#167-Two-Sum-II-Input-Array-Is-Sorted" class="headerlink" title="167. Two Sum II - Input Array Is Sorted"></a>167. Two Sum II - Input Array Is Sorted</h2><p>Medium</p><p>Given a <strong>1-indexed</strong> array of integers <code>numbers</code> that is already *<strong>sorted in non-decreasing order*</strong>, find two numbers such that they add up to a specific <code>target</code> number. Let these two numbers be <code>numbers[index1]</code> and <code>numbers[index2]</code> where <code>1 &lt;= index1 &lt; index2 &lt;= numbers.length</code>.</p><p>Return <em>the indices of the two numbers,</em> <code>index1</code> <em>and</em> <code>index2</code><em>, <strong>added by one</strong> as an integer array</em> <code>[index1, index2]</code> <em>of length 2.</em></p><p>The tests are generated such that there is <strong>exactly one solution</strong>. You <strong>may not</strong> use the same element twice.</p><p>Your solution must use only constant extra space.</p><p><strong>Example 1:</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: numbers = [2,7,11,15], target = 9</span><br><span class="line">Output: [1,2]</span><br><span class="line">Explanation: The sum of 2 and 7 is 9. Therefore, index1 = 1, index2 = 2. We return [1, 2].</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: numbers = [2,3,4], target = 6</span><br><span class="line">Output: [1,3]</span><br><span class="line">Explanation: The sum of 2 and 4 is 6. Therefore index1 = 1, index2 = 3. We return [1, 3].</span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: numbers = [-1,0], target = -1</span><br><span class="line">Output: [1,2]</span><br><span class="line">Explanation: The sum of -1 and 0 is -1. Therefore index1 = 1, index2 = 2. We return [1, 2].</span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li><code>2 &lt;= numbers.length &lt;= 3 * 104</code></li><li><code>-1000 &lt;= numbers[i] &lt;= 1000</code></li><li><code>numbers</code> is sorted in <strong>non-decreasing order</strong>.</li><li><code>-1000 &lt;= target &lt;= 1000</code></li><li>The tests are generated such that there is <strong>exactly one solution</strong>.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] twoSum(<span class="type">int</span>[] numbers, <span class="type">int</span> target) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span> ; i &lt; numbers.length; i ++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span>  <span class="variable">j</span> <span class="operator">=</span> numbers.length - <span class="number">1</span>; j &gt; i; j --)&#123;</span><br><span class="line">                <span class="keyword">if</span> (numbers[i] + numbers[j] == target)</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[] &#123;i+<span class="number">1</span>,j+<span class="number">1</span>&#125;;</span><br><span class="line">                <span class="keyword">if</span>( numbers[i] + numbers[j] &lt; target) </span><br><span class="line">               <span class="comment">// without this if sentence then the time complexity cannot pass the test</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‚≠ïThe <code>break</code> statement can be used to <strong>jump out of a loop.</strong></p><p>‚Äã     The <code>continue</code> statement <strong>breaks one iteration (in the loop)</strong>, if a specified condition occurs, and continues with the next iteration in the loop.</p><h2 id="2109-Adding-Spaces-to-a-String"><a href="#2109-Adding-Spaces-to-a-String" class="headerlink" title="2109. Adding Spaces to a String"></a>2109. Adding Spaces to a String</h2><p>Medium</p><p><strong>Example 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Input: s = &quot;LeetcodeHelpsMeLearn&quot;, spaces = [8,13,15]</span><br><span class="line">Output: &quot;Leetcode Helps Me Learn&quot;</span><br><span class="line">Explanation: </span><br><span class="line">The indices 8, 13, and 15 correspond to the underlined characters in &quot;LeetcodeHelpsMeLearn&quot;.</span><br><span class="line">We then place spaces before those characters.</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Input: s = &quot;icodeinpython&quot;, spaces = [1,5,7,9]</span><br><span class="line">Output: &quot;i code in py thon&quot;</span><br><span class="line">Explanation:</span><br><span class="line">The indices 1, 5, 7, and 9 correspond to the underlined characters in &quot;icodeinpython&quot;.</span><br><span class="line">We then place spaces before those characters.</span><br></pre></td></tr></table></figure><p><strong>üåüCoding:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">addSpaces</span><span class="params">(String s, <span class="type">int</span>[] spaces)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = <span class="number">0</span>; i &lt; s.length(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>( j &lt; spaces.length &amp;&amp; i == spaces[j] )&#123;</span><br><span class="line">                ans.append(<span class="string">&quot; &quot;</span>);</span><br><span class="line">                j++;</span><br><span class="line">                i--;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                ans.append(s.charAt(i));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‚≠ï Here we should use StringBuilder not ArrayList</p><p>‚≠ï Time Limit Exceeded:</p><p>ifÈáåÈù¢ i‚ÄìÔºõ ÊúÄÂêéÂèài++ ; i‰∏ÄÁõ¥ÊòØ‰∏Ä‰∏™ÂÄº‰∏çÂèòÂ∞±ÂèçÂ§çË∑ëfor loop</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public String addSpaces(String s, int[] spaces) &#123;</span><br><span class="line">        int index = 0;</span><br><span class="line">        StringBuilder ans = new StringBuilder();</span><br><span class="line">        for(int i = 0, j = 0; i &lt; s.length(); i++)&#123;</span><br><span class="line">            if( i == spaces[j] )&#123;</span><br><span class="line">                ans.append(&quot; &quot;);</span><br><span class="line">                i--;</span><br><span class="line">                if(j &lt; spaces.length - 1)</span><br><span class="line">                    j++;</span><br><span class="line">                </span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                ans.append(s.charAt(i));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return ans.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>[toc]</p>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>üíêWelcomeüíê</title>
      <link href="/2023/02/12/Welcome/"/>
      <url>/2023/02/12/Welcome/</url>
      
        <content type="html"><![CDATA[<p>Welcome to my corner of the internetüéá! This is where I share my battles and victories against Leetcode and other coding challenges. Think of it as a training diary for a superhero, but instead of saving the world, I‚Äôm saving lines of code. So buckle up, it‚Äôs going to be a wild ride‚ù§Ô∏è‚Äçüî•!</p><p><img src="https://miro.medium.com/max/1400/0*oyD7ekV-hMU91h4J.png" alt="img"></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
